/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import java.time.LocalDateTime

import jooq.Checkgeom
import jooq.keys.KEY_BOOK_INTEREST_PRIMARY
import jooq.tables.records.BookInterestRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookInterest(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BookInterestRecord>?,
    aliased: Table<BookInterestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BookInterestRecord>(
    alias,
    Checkgeom.CHECKGEOM,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>checkgeom.book_interest</code>
         */
        val BOOK_INTEREST: BookInterest = BookInterest()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookInterestRecord> = BookInterestRecord::class.java

    /**
     * The column <code>checkgeom.book_interest.created_date_time</code>.
     */
    val CREATED_DATE_TIME: TableField<BookInterestRecord, LocalDateTime?> = createField(DSL.name("created_date_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>checkgeom.book_interest.updated_date_time</code>.
     */
    val UPDATED_DATE_TIME: TableField<BookInterestRecord, LocalDateTime?> = createField(DSL.name("updated_date_time"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>checkgeom.book_interest.explanation</code>.
     */
    val EXPLANATION: TableField<BookInterestRecord, String?> = createField(DSL.name("explanation"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>checkgeom.book_interest.id</code>.
     */
    val ID: TableField<BookInterestRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>checkgeom.book_interest.title</code>.
     */
    val TITLE: TableField<BookInterestRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>checkgeom.book_interest.user_id</code>.
     */
    val USER_ID: TableField<BookInterestRecord, String?> = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>checkgeom.book_interest.library_type</code>.
     */
    val LIBRARY_TYPE: TableField<BookInterestRecord, String?> = createField(DSL.name("library_type"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    /**
     * The column <code>checkgeom.book_interest.status</code>.
     */
    val STATUS: TableField<BookInterestRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(60).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BookInterestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BookInterestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>checkgeom.book_interest</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>checkgeom.book_interest</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>checkgeom.book_interest</code> table reference
     */
    constructor(): this(DSL.name("book_interest"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BookInterestRecord>): this(Internal.createPathAlias(child, key), child, key, BOOK_INTEREST, null)
    override fun getSchema(): Schema? = if (aliased()) null else Checkgeom.CHECKGEOM
    override fun getPrimaryKey(): UniqueKey<BookInterestRecord> = KEY_BOOK_INTEREST_PRIMARY
    override fun `as`(alias: String): BookInterest = BookInterest(DSL.name(alias), this)
    override fun `as`(alias: Name): BookInterest = BookInterest(alias, this)
    override fun `as`(alias: Table<*>): BookInterest = BookInterest(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookInterest = BookInterest(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookInterest = BookInterest(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BookInterest = BookInterest(name.getQualifiedName(), null)
}
